---
groups:
  - name: aws-all-in-one
    jobs:
      - build-ami
      - upload-inner-template-alpha
      - commit-and-pr-aws-quickstart-repo
      - replicate-ami
      - instantiate-outer-template-alpha
      - integration-test
      - delete-cf
      - github-release
      - build-quickstart-ci
      - unit-test
      - build-quickstart-alpha
      - check-cf-status
      - make_pr_to_aws
  - name: tiles
    jobs:
      - update-cf-tile

resource_types:
- name: ami
  type: docker-image
  source:
    repository: jdub/ami-resource

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: webpage
  type: docker-image
  source:
    repository: cholick/concourse-webpage-resource
    tag: latest

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest


resources:
- name: quickstart-ci-image
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: cfplatformeng/quickstart-ci

- name: ubuntu-ami
  type: ami
  check_every: 1h
  source:
    aws_access_key_id: ((aws_admin_key_id))
    aws_secret_access_key: ((aws_admin_secret_access_key))
    region: us-west-1
    filters:
      owner-id: "099720109477"
      is-public: true
      state: available
      name: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*
      root-device-type: ebs

- name: quickstart-repo
  type: git
  source:
    branch: master
    uri: https://github.com/cf-platform-eng/aws-pcf-quickstart.git
    username: ((github_user_name))
    password: ((github_access_token))
    ignore_paths:
      - ci/*.yml

- name: quickstart-repo-ci
  type: git
  source:
    branch: master
    uri: https://github.com/cf-platform-eng/aws-pcf-quickstart.git
    username: ((github_user_name))
    password: ((github_access_token))
    paths: [ci/*]
    disable_ci_skip: true

- name: aws-quickstart-repo
  type: git
  source:
    branch: develop
    uri: https://github.com/cf-platform-eng/quickstart-pivotal-cloudfoundry.git
    username: ((github_user_name))
    password: ((github_access_token))

- name: cloud-formation-template-alpha
  type: s3
  source:
    bucket: aws-1click-pcf-quickstart-templates
    region_name: us-west-2
    versioned_file: quickstart-pivotal-cloudfoundry/templates/cloud-formation.template
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: ops-manager-template-alpha
  type: s3
  source:
    bucket: aws-1click-pcf-quickstart-templates
    region_name: us-west-2
    versioned_file: quickstart-pivotal-cloudfoundry/templates/ops-manager.template
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: pivotal-cloudfoundry-template-alpha
  type: s3
  source:
    bucket: aws-1click-pcf-quickstart-templates
    region_name: us-west-2
    versioned_file: quickstart-pivotal-cloudfoundry/templates/pivotal-cloudfoundry.template
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: quickstart-scripts-alpha
  type: s3
  source:
    bucket: aws-1click-pcf-quickstart-templates
    region_name: us-west-2
    versioned_file: quickstart-pivotal-cloudfoundry/scripts/quickstart.tgz
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: ami-version
  type: semver
  source:
    driver: git
    uri: https://github.com/cf-platform-eng/aws-pcf-quickstart
    branch: ami_version
    file: ami_version
    username: ((github_user_name))
    password: ((github_access_token))

- name: cf-tile
  type: pivnet
  source:
    api_token: ((pivnet-token))
    copy_metadata: true
    product_slug: elastic-runtime

# - name: aws-service-broker-tile
#   type: github-release
#   source:
#     owner: awslabs
#     repository: aws-servicebroker
#     access_token: ((github_access_token))
#     pre_release: true
#     version: v1.0.0-beta.3

- name: opsman-tile
  type: pivnet
  source:
    api_token: ((pivnet_token))
    copy_metadata: true
    product_slug: ops-manager

- name: packer-result
  type: s3
  source:
    bucket: aws-1click-pcf-quickstart-releases
    region_name: us-west-2
    regexp: packer-result-(.*).json
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: ami-mapping
  type: s3
  source:
    bucket: aws-1click-pcf-quickstart-releases
    region_name: us-west-2
    regexp: ami-mapping-(.*).json
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))

- name: awslogs-agent-setup
  type: webpage
  source:
    filename: awslogs-agent-setup.py
    url: https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

- name: aws-cfn-bootstrap
  type: webpage
  source:
    filename: aws-cfn-bootstrap-latest.tar.gz
    url: https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

- name: aws-pcf-concourse-state
  type: s3
  source:
    bucket: aws-1click-pcf-concourse-state
    region_name: us-west-2
    versioned_file: stackid
    access_key_id: ((aws_admin_key_id))
    secret_access_key: ((aws_admin_secret_access_key))

- name: quickstart-github-release
  type: github-release
  source:
    owner: cf-platform-eng
    repository: aws-pcf-quickstart
    access_token: ((github_access_token))

- name: pivnet-release
  type: github-release
  source:
    owner: pivotal-cf
    repository: pivnet-cli
    access_token: ((github_access_token))
    version: v0.0.49

- name: om-release
  type: github-release
  source:
    owner: pivotal-cf
    repository: om
    access_token: ((github_access_token))

- name: version
  type: semver
  source:
    driver: git
    uri: https://github.com/cf-platform-eng/aws-pcf-quickstart
    branch: quickstart_release_version
    file: quickstart_release_version
    username: ((github_user_name))
    password: ((github_access_token))

# - name: slack-alert
#   type: slack-notification
#   source:
#     url: ((slack_hook))


jobs:
- name: build-quickstart-ci
  public: true
  serial: true
  plan:
  - get: quickstart-repo
  - put: quickstart-ci-image
    params:
      build: quickstart-repo/ci/docker

- name: unit-test
  plan:
  - get: quickstart-repo
    trigger: true
  - task: unit-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: quickstart-repo
      run:
        path: bash
        args:
        - -exc
        - |
          pushd quickstart-repo
            export GO111MODULE=on
            export GOFLAGS=-mod=vendor
            ginkgo -skipPackage=certification -r .
          popd

- name: build-ami
  plan:
  - get: quickstart-repo
  - get: awslogs-agent-setup
  - get: aws-cfn-bootstrap
  - get: ubuntu-ami
    trigger: true
  - get: ami-version
    params:
      bump: patch
  - task: build-ami
    attempts: 2
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: quickstart-repo
      - name: ami-version
      - name: awslogs-agent-setup
      - name: aws-cfn-bootstrap
      - name: ubuntu-ami
      outputs:
      - name: output
      params:
        AWS_ACCESS_KEY_ID: ((aws_admin_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_admin_secret_access_key))
      run:
        path: bash
        args:
        - -exc
        - |
          ./quickstart-repo/ci/generate-packer.py
          mkdir -p output
          cp manifest.json output/packer-result-$(cat ./ami-version/version).json
  - put: ami-version
    params:
      file: ami-version/version
  - put: packer-result
    params:
      file: output/packer-result-*.json

- name: upload-inner-template-alpha
  plan:
  - get: quickstart-repo
    trigger: true
    passed:
      - unit-test
  - put: cloud-formation-template-alpha
    params:
      file: quickstart-repo/cloudformation/cloud-formation.json
      acl: public-read
  - put: ops-manager-template-alpha
    params:
      file: quickstart-repo/cloudformation/ops-manager.json
      acl: public-read

- name: replicate-ami
  plan:
  - get: quickstart-repo
  - get: packer-result
    trigger: true
    passed:
    - build-ami
  - get: ami-version
  - get: opsman-tile
    trigger: true
    params:
      globs:
        - '*.yml'
  - task: replicate-ami
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: quickstart-repo
      - name: packer-result
      - name: ami-version
      - name: opsman-tile
      outputs:
      - name: output
      params:
        AWS_ACCESS_KEY_ID: ((aws_admin_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_admin_secret_access_key))
      run:
        path: bash
        args:
        - -exc
        - |
          mkdir -p output
          pip install 'PyYAML==3.13'
          ./quickstart-repo/ci/copy-image.py
  - put: ami-mapping
    params:
      file: output/ami-mapping-*.json

- name: instantiate-outer-template-alpha
  plan:
  - get: quickstart-repo
    trigger: true
    passed:
      - unit-test
  - get: ami-mapping
    trigger: true
    passed:
      - replicate-ami
  - get: opsman-tile
    trigger: true
    params:
      globs:
        - '*.yml'
  - task: instantiate-outer-template
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: python
          tag: "3"
      inputs:
      - name: quickstart-repo
      - name: ami-mapping
      - name: opsman-tile
      outputs:
      - name: output
      run:
        path: bash
        args:
        - -exc
        - |
          pushd quickstart-repo
          pip install jinja2 'PyYAML==3.13'
          python3 ci/instantiate-quickstart-template.py
          popd
          cp quickstart-repo/cloudformation/pivotal-cloudfoundry.template output
  - put: pivotal-cloudfoundry-template-alpha
    params:
      file: output/pivotal-cloudfoundry.template
      acl: public-read

- name: build-quickstart-alpha
  plan:
  - get: pivnet-release
  - get: om-release
  - get: quickstart-repo
    trigger: true
    passed:
      - unit-test
  # - get: ert-tile
    # trigger: true
    # params:
    #   globs: []
  # - get: aws-broker-tile
  #   trigger: true
  #   params:
  #     globs:
  #       - aws-service-broker-*-tile.pivotal
  - task: build-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: pivnet-release
      - name: om-release
      - name: quickstart-repo
      # - name: ert-tile
      # - name: aws-broker-tile
      outputs:
      - name: output
      params:
        PIVNET_TOKEN: ((pivnet_token))
      run:
        path: bash
        args:
        - -exc
        - |
          mkdir -p quickstart
          mkdir -p quickstart/bin
          cp -r quickstart-repo/* quickstart
          version=$(cat om-release/version)
          cp om-release/om-linux-${version} quickstart/bin/om
          chmod +x quickstart/bin/om
          cp pivnet-release/pivnet-linux* quickstart/bin/pivnet
          chmod +x quickstart/bin/pivnet

          pushd quickstart

          export GO111MODULE=on
          export GOFLAGS=-mod=vendor
          go build .

          popd

          mkdir -p output
          tar -czvf output/quickstart.tgz quickstart
  - put: quickstart-scripts-alpha
    params:
      acl: public-read
      file: output/quickstart.tgz

- name: integration-test
  plan:
  - get: quickstart-repo
    trigger: false
    passed:
      - upload-inner-template-alpha
  - get: quickstart-scripts-alpha
    trigger: false
    passed:
    - build-quickstart-alpha
  - get: pivotal-cloudfoundry-template-alpha
    trigger: false
    passed:
    - instantiate-outer-template-alpha
  - task: integration-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: python
          tag: "3"
      inputs:
      - name: quickstart-repo
      - name: pivotal-cloudfoundry-template-alpha
      outputs:
      - name: output
      params:
        AWS_CF_DEPLOYMENT_SIZE: ((aws_cf_deploymentsize))
        AWS_CF_PASSWORD: ((aws_cf_password))
        AWS_CF_DOMAIN: ((aws_cf_domain))
        AWS_CF_HOSTEDZONEID: ((aws_cf_hostedzoneid))
        AWS_CF_PCFKEYPAIR: ((aws_cf_pcfkeypair))
        AWS_CF_PIVNETTOKEN: ((pivnet_token))
        AWS_ACCESS_KEY_ID: ((aws_admin_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_admin_secret_access_key))
        AWS_INTEGRATION_REGION: ((aws_integration_region))
        US_EAST_1_SSLCERTIFICATEARN: ((us_east_1_sslcertificatearn))
        US_EAST_2_SSLCERTIFICATEARN: ((us_east_2_sslcertificatearn))
        US_WEST_1_SSLCERTIFICATEARN: ((us_west_1_sslcertificatearn))
        US_WEST_2_SSLCERTIFICATEARN: ((us_west_2_sslcertificatearn))
        CA_CENTRAL_1_SSLCERTIFICATEARN: ((ca_central_1_sslcertificatearn))
        EU_WEST_1_SSLCERTIFICATEARN: ((eu_west_1_sslcertificatearn))
        EU_CENTRAL_1_SSLCERTIFICATEARN: ((eu_central_1_sslcertificatearn))
        EU_WEST_2_SSLCERTIFICATEARN: ((eu_west_2_sslcertificatearn))
        AP_SOUTHEAST_1_SSLCERTIFICATEARN: ((ap_southeast_1_sslcertificatearn))
        AP_SOUTHEAST_2_SSLCERTIFICATEARN: ((ap_southeast_2_sslcertificatearn))
        AP_NORTHEAST_2_SSLCERTIFICATEARN: ((ap_northeast_2_sslcertificatearn))
        AP_NORTHEAST_1_SSLCERTIFICATEARN: ((ap_northeast_1_sslcertificatearn))
        AP_SOUTH_1_SSLCERTIFICATEARN: ((ap_south_1_sslcertificatearn))
        SA_EAST_1_SSLCERTIFICATEARN: ((sa_east_1_sslcertificatearn))
      run:
        path: bash
        args:
        - -exc
        - |
          # run create stack from the template before
          pushd quickstart-repo
          pip install -r requirements.txt
          python ./ci/create-stack.py '../pivotal-cloudfoundry-template-alpha/pivotal-cloudfoundry.template' eu-central-1
          popd
          cp quickstart-repo/stackid output/stackid
    # on_failure:
    #   in_parallel:
    #     # - put: slack-alert
    #     #   params:
    #     #     icon_emoji: ":sad_panda:"
    #     #     username: Concourse CI
    #     #     channel: "#amazon"
    #     #     text: "Integration test failed"
    #     - task: delete-buckets
    #       config:
    #         inputs:
    #         - name: quickstart-repo
    #         platform: linux
    #         image_resource:
    #           type: docker-image
    #           source:
    #             repository: python
    #             tag: "3"
    #         params:
    #           AWS_ACCESS_KEY_ID: ((aws_admin_key_id))
    #           AWS_SECRET_ACCESS_KEY: ((aws_admin_secret_access_key))
    #         run:
    #           path: bash
    #           args:
    #           - -exc
    #           - |
    #             pushd quickstart-repo
    #             pip install boto3
    #             python ./ci/delete-buckets.py
    #             popd
  - put: aws-pcf-concourse-state
    params:
      file: output/stackid

- name: check-cf-status
  plan:
  - get: om-release
  - get: quickstart-repo
    passed:
    - integration-test
  - get: aws-pcf-concourse-state
    trigger: true
    passed:
    - integration-test
  - task: check-cf-status
    attempts: 10
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: om-release
      - name: quickstart-repo
      params:
        AWS_CF_PASSWORD: ((aws_cf_password))
        AWS_CF_DOMAIN: ((aws_cf_domain))
      run:
        path: bash
        args:
        - -exc
        - |
          version=$(cat om-release/version)
          mv om-release/om-linux-${version} /usr/local/bin/om
          chmod +x /usr/local/bin/om
          pushd quickstart-repo
          pip install -r requirements.txt
          sleep 30
          python ./ci/check-status.py
          popd

- name: delete-cf
  plan:
  - get: om-release
  - get: quickstart-repo
    trigger: true
    passed:
    - check-cf-status
  - get: aws-pcf-concourse-state
    passed:
    - integration-test
  - task: delete-cf
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: quickstart-repo
      - name: aws-pcf-concourse-state
      params:
        AWS_ACCESS_KEY_ID: ((aws_admin_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_admin_secret_access_key))
        AWS_INTEGRATION_REGION: ((aws_integration_region))
      run:
        path: bash
        args:
        - -exc
        - |
          pushd quickstart-repo
          pip install -r requirements.txt
          python ./ci/delete-stack.py
          popd
    ensure:
      in_parallel:
        - task: delete-buckets
          config:
            inputs:
            - name: quickstart-repo
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: python
                tag: "3"
            params:
              AWS_ACCESS_KEY_ID: ((aws_admin_key_id))
              AWS_SECRET_ACCESS_KEY: ((aws_admin_secret_access_key))
            run:
              path: bash
              args:
              - -exc
              - |
                pushd quickstart-repo
                pip install boto3
                python ./ci/delete-buckets.py
                popd

- name: github-release
  plan:
  - get: quickstart-scripts-alpha
    passed:
    - integration-test
  - get: aws-pcf-concourse-state
    trigger: true
    passed:
    - check-cf-status
  - get: version
    params:
      bump: patch
  - get: opsman-tile
    params:
      globs:
        - '*.yml'
    passed:
    - instantiate-outer-template-alpha
  - get: quickstart-repo
    passed:
    - integration-test
  - get: quickstart-repo-ci
  - task: add-version-to-filename
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: quickstart-scripts-alpha
      - name: version
      - name: opsman-tile
      - name: quickstart-repo
      - name: quickstart-repo-ci
      outputs:
      - name: output
      run:
        path: quickstart-repo-ci/ci/finalize-release.sh
  - put: version
    params:
      file: version/version
  - put: quickstart-github-release
    params:
      name: version/version
      tag: version/version
      body: output/notes.md
      globs:
      - output/quickstart-*.tgz

- name: commit-and-pr-aws-quickstart-repo
  plan:
  - get: quickstart-repo
    passed:
    - github-release
  - get: aws-quickstart-repo
  - get: quickstart-scripts-alpha
    passed:
      - integration-test
  - get: cloud-formation-template-alpha
    passed:
    - upload-inner-template-alpha
  - get: ops-manager-template-alpha
    passed:
    - upload-inner-template-alpha
  - get: pivotal-cloudfoundry-template-alpha
    passed:
    - integration-test
  - get: aws-pcf-concourse-state
    trigger: true
    passed:
    - integration-test
  - task: commit-aws-quickstart-repo
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cfplatformeng/quickstart-ci
      inputs:
      - name: quickstart-repo
      - name: aws-quickstart-repo
      - name: quickstart-scripts-alpha
      - name: cloud-formation-template-alpha
      - name: ops-manager-template-alpha
      - name: pivotal-cloudfoundry-template-alpha
      outputs:
      - name: aws-quickstart-repo-updated
      params: {}
      run:
        path: bash
        args:
        - -exc
        - |
          pushd quickstart-repo
          sha=$(git rev-parse HEAD)
          popd

          cp -r aws-quickstart-repo/. aws-quickstart-repo-updated

          #todo: are these paths actually right? What about full path in s3
          cp quickstart-scripts-alpha/quickstart.tgz aws-quickstart-repo-updated/scripts/quickstart.tgz
          cp cloud-formation-template-alpha/cloud-formation.template aws-quickstart-repo-updated/templates/cloud-formation.template
          cp ops-manager-template-alpha/ops-manager.template aws-quickstart-repo-updated/templates/ops-manager.template
          cp pivotal-cloudfoundry-template-alpha/pivotal-cloudfoundry.template aws-quickstart-repo-updated/templates/pivotal-cloudfoundry.template
          cp quickstart-repo/scripts/gen_ssl_certs.sh aws-quickstart-repo-updated/scripts/gen_ssl_certs.sh

          pushd aws-quickstart-repo-updated

          pushd scripts/quickstart
          git checkout master && git pull
          git checkout $sha
          popd

          git config --global user.name "Pivotal Concourse"
          git config --global user.email "ci@example.com" #todo: better email....

          git add -A .
          git commit -m "Commiting release candidate for PR"

          popd
  - put: aws-quickstart-repo
    params:
      repository: aws-quickstart-repo-updated

# - name: make_pr_to_aws
#   plan:
#   - get: quickstart-repo
#     passed:
#     - commit-and-pr-aws-quickstart-repo
#   - get: aws-quickstart-repo
#   - get: version
#   - task: make_pr_to_aws
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: cfplatformeng/quickstart-ci
#       inputs:
#       - name: quickstart-repo
#       - name: version
#       params:
#         GITHUB_ACCESS_TOKEN: ((github_access_token))
#       run:
#         path: bash
#         args:
#         - -exc
#         - |
#           pip install requests
#           python3 quickstart-repo/ci/github-pullrequest.py

- name: make_pr_to_aws
  plan:
  - in_parallel:
    - get: quickstart-repo
      passed:
      - commit-and-pr-aws-quickstart-repo
    - get: aws-quickstart-repo
    - get: quickstart-repo-ci
    - get: version
    - get: quickstart-ci-image
  - task: make_pr_to_aws
    image: quickstart-ci-image
    file: quickstart-repo-ci/ci/tasks/create-pull-request.yml
    params:
      GITHUB_USER: ((github_user_name))
      GITHUB_PASSWORD: ((github_access_token))


- name: update-cf-tile
  plan:
  - in_parallel:
    - get: tile
      resource: cf-tile
      trigger: true
      params: { globs: [] }
    - get: repo
      resource: quickstart-repo
    - get: quickstart-repo-ci
    - get: quickstart-ci-image
  - task: update-srt-tile
    image: quickstart-ci-image
    file: quickstart-repo-ci/ci/tasks/update-tile.yml
    params:
      PIVNET_TOKEN: ((pivnet-legacy-token))
      TILE_NAME: cf
      TILE_BASE_DIR: templates/assets/tiles/srt
  - task: update-ert-tile
    image: quickstart-ci-image
    file: quickstart-repo-ci/ci/tasks/update-tile.yml
    params:
      PIVNET_TOKEN: ((pivnet-legacy-token))
      TILE_NAME: cf
      TILE_BASE_DIR: templates/assets/tiles/ert
      OPS_FILE: templates/assets/options/full.yml
  - task: update-ert-starter-tile
    image: quickstart-ci-image
    file: quickstart-repo-ci/ci/tasks/update-tile.yml
    params:
      PIVNET_TOKEN: ((pivnet-legacy-token))
      TILE_NAME: cf
      TILE_BASE_DIR: templates/assets/tiles/ert
      OPS_FILE: templates/assets/options/starter.yml
  - put: quickstart-repo
    params:
      repository: repo
      merge: true

# - name: update-aws-service-broker-tile
#   plan:
#   - in_parallel:
#     - get: tile
#       resource: aws-service-broker-tile
#       trigger: true
#       params: { globs: [] }
#     - get: quickstart-repo
#     - get: quickstart-repo-ci
#     - get: quickstart-ci-image
#   - task: update-tile
#     image: quickstart-ci-image
#     file: quickstart-repo-ci/ci/tasks/update-tile.yml
#     params:
#       PIVNET_TOKEN: ((pivnet-legacy-token))
#        TILE_NAME: aws-service-broker
#        TILE_BASE_DIR: templates/assets/tiles/aws-service-broker
#   - put: quickstart-repo
#     params:
#       repository: repo
#       merge: true
